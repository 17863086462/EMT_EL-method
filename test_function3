
function [Task]=test_function3(Task_dim,train_set,predict_set,train_label,test_label,x_neig)
    dim=Task_dim;
    Task(1).dims=dim;
    Task(1).fnc=@(x)classify_SVM(x,train_set,predict_set,train_label,test_label);
    Task(1).Lb=0*ones(1,dim);
    Task(1).Ub=1*ones(1,dim);
 
    Task(2).dims=dim;
    Task(2).fnc=@(x)classify_Discriminant(x,train_set,predict_set,train_label,test_label);
    Task(2).Lb=0*ones(1,dim);
    Task(2).Ub=1*ones(1,dim);

    Task(3).dims=dim;
    %Task(3).fnc=@(x)classify_TREE(x,train_set,predict_set,train_label,test_label);
    Task(3).fnc=@(x)classify_KNN(x,train_set,predict_set,train_label,test_label);
    %Task(3).fnc=@(x)classify_SRC(x,train_set,predict_set,train_label,test_label,x_neig);
    Task(3).Lb=0*ones(1,dim);
    Task(3).Ub=1*ones(1,dim);
    Task(3).dims=dim;
    %Task(3).fnc=@(x)classify_TREE(x,train_set,predict_set,train_label,test_label);

    %Task(3).fnc=@(x)classify_SRC(x,train_set,predict_set,train_label,test_label,x_neig);

    function obj =classify_SVM(x,train_set,predict_set,train_label,test_label)

        svmModel = svmtrain(train_label',train_set(find(x),:)', '-s 0 -t 1 -c 1.2 -g 2.8 -q');
        [ptrain,acctrain,dec_values1] = svmpredict(test_label',predict_set(find(x),:)',svmModel);  
        classify_error=(100-acctrain(1))/100;
        classify_right=acctrain(1)/100;
        obj=classify_error;
        %obj=1/classify_right;
    end
    function [obj] = classify_KNN(x,train_set,test_set,train_label,test_label)

        %predict_label=[];
        %for i=1:length(test_label)                                             
         %   relustLabel = KNN(test_set(find(x),i)',train_set(find(x),:)',train_label',3);  
         %   predict_label=[predict_label;relustLabel];
        %end
        knn_classify = ClassificationKNN.fit(train_set(find(x),:)',train_label,'NumNeighbors',3);
        predict_label   =       predict(knn_classify, test_set(find(x),:)');
        classify_error = sum(predict_label~=test_label')/length(test_label); 
        classify_right = sum(predict_label==test_label')/length(test_label);
        obj=classify_error;
        %obj=1/classify_right;
    end
 
 function [obj] = classify_Discriminant(x,train_set,predict_set,train_label,test_label) 
    
     clsD = ClassificationDiscriminant.fit(train_set(find(x),:)', double(train_label));
     predict_label   =  predict(clsD, predict_set(find(x),:)');
     classify_error=sum(predict_label~=test_label')/length(test_label);
     classify_right = sum(predict_label==test_label')/length(test_label);
     obj=classify_error;
     %obj=1/classify_right;
 end

end

